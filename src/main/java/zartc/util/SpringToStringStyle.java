package zartc.util;

import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Vector;

import org.apache.commons.lang3.builder.ToStringStyle;

/**
 * A customized ToStringStyle that displays more informations about the type of field, arrays and
 * collections. The format generated by this ToStringStyle mimic the format generated by Spring's
 * ToStringCreator.
 *
 * @author Pascal JACOB
 */
public class SpringToStringStyle extends ToStringStyle {
	private static final long serialVersionUID = 1L;

	/**
	 * A preintanciated toStringStyle that output short class prefix and no hascode
	 */
	public static final ToStringStyle SHORT_NO_HASH_STYLE = new SpringToStringStyle("");
	/**
	 * A preintanciated toStringStyle that output short class prefix and object's system hascode
	 */
	public static final ToStringStyle SHORT_WITH_HASH_STYLE = new SpringToStringStyle("@");
	/**
	 * A preintanciated toStringStyle that output long class prefix and object's system hascode
	 */
	public static final ToStringStyle LONG_WITH_HASH_STYLE = new SpringToStringStyle("L@");

	private static final String COLLECTION = "coll";
	private static final String VECTOR = "vector";
	private static final String SET = "set";
	private static final String LIST = "list";
	private static final String MAP = "map";
	private static final String ARRAY = "array";

	private static final String STRING_START = "\"";
	private static final String STRING_END = "\"";

	/**
	 * Variation of the default style are possible using the following special characters in the
	 * <code>options</code> parameter.
	 * <ul>
	 * <li>a capital &nbsp;&nbsp;<b><code>L</code></b>&nbsp;&nbsp; letter in the option string will
	 * set the style to output long classname prefix instead of the default short class name prefix.
	 * <li>a &nbsp;&nbsp;<b><code>@</code></b>&nbsp;&nbsp; character will set the style to output
	 * the object's system hash prefix - nice for debugging
	 * </ul>
	 *
	 * @param options a string indicating which variations of the default style you want.
	 */
	private SpringToStringStyle(String options) {
		super();
		setContentStart("{");
		setContentEnd("}");
		setArrayStart("[");
		setArrayEnd("]");
		setArraySeparator(",");
		setFieldSeparator(", ");
		setArrayContentDetail(true);
		setUseShortClassName(!options.contains("L"));
		setUseIdentityHashCode(options.contains("@"));
	}

	@Override
	protected void appendDetail(final StringBuffer buffer, final String fieldName, final Object value) {
		if (value instanceof String) {
			appendStringStart(buffer);
			buffer.append(value);
			appendStringEnd(buffer);
		}
		else {
			super.appendDetail(buffer, fieldName, value);
		}
	}

	private void appendStringStart(StringBuffer buffer) {
		buffer.append(STRING_START);
	}

	private void appendStringEnd(StringBuffer buffer) {
		buffer.append(STRING_END);
	}

	@Override
	protected void appendDetail(StringBuffer buffer, String fieldName, boolean[] array) {
		buffer.append(ARRAY).append("<").append(getArrayType(array)).append(">");
		super.appendDetail(buffer, fieldName, array);
	}

	@Override
	protected void appendDetail(StringBuffer buffer, String fieldName, byte[] array) {
		buffer.append(ARRAY).append("<").append(getArrayType(array)).append(">");
		super.appendDetail(buffer, fieldName, array);
	}

	@Override
	protected void appendDetail(StringBuffer buffer, String fieldName, char[] array) {
		buffer.append(ARRAY).append("<").append(getArrayType(array)).append(">");
		super.appendDetail(buffer, fieldName, array);
	}

	@Override
	protected void appendDetail(StringBuffer buffer, String fieldName, double[] array) {
		buffer.append(ARRAY).append("<").append(getArrayType(array)).append(">");
		super.appendDetail(buffer, fieldName, array);
	}

	@Override
	protected void appendDetail(StringBuffer buffer, String fieldName, float[] array) {
		buffer.append(ARRAY).append("<").append(getArrayType(array)).append(">");
		super.appendDetail(buffer, fieldName, array);
	}

	@Override
	protected void appendDetail(StringBuffer buffer, String fieldName, int[] array) {
		buffer.append(ARRAY).append("<").append(getArrayType(array)).append(">");
		super.appendDetail(buffer, fieldName, array);
	}

	@Override
	protected void appendDetail(final StringBuffer buffer, final String fieldName, final long[] array) {
		buffer.append(ARRAY).append("<").append(getArrayType(array)).append(">");
		super.appendDetail(buffer, fieldName, array);
	}

	@Override
	protected void appendDetail(StringBuffer buffer, String fieldName, short[] array) {
		buffer.append(ARRAY).append("<").append(getArrayType(array)).append(">");
		super.appendDetail(buffer, fieldName, array);
	}

	@Override
	protected void appendDetail(StringBuffer buffer, String fieldName, Object[] array) {
		buffer.append(ARRAY).append("<").append(getArrayType(array)).append(">");
		super.appendDetail(buffer, fieldName, array);
	}

	@Override
	protected void reflectionAppendArrayDetail(StringBuffer buffer, String fieldName, Object array) {
		buffer.append(ARRAY).append("<").append(getArrayType(array)).append(">");
		super.reflectionAppendArrayDetail(buffer, fieldName, array);
	}

	@Override
	protected void appendDetail(StringBuffer buffer, String fieldName, Map<?, ?> map) {
		buffer.append(MAP);
		buffer.append(getArrayStart());

		for (Iterator<?> it = map.entrySet().iterator(); it.hasNext();) {
			Object next = it.next();
			appendDetail(buffer, fieldName, ((Map.Entry<?, ?>)next).getKey());
			buffer.append("->");
			appendDetail(buffer, fieldName, ((Map.Entry<?, ?>)next).getValue());
			if (it.hasNext()) {
				buffer.append(getArraySeparator());
			}
		}
		buffer.append(getArrayEnd());
	}

	@Override
	protected void appendDetail(StringBuffer buffer, String fieldName, Collection<?> coll) {
		buffer.append(getCollectionTypeString(coll));
		super.appendDetail(buffer, fieldName, coll);
	}

	private String getCollectionTypeString(Collection<?> value) {
		if (value instanceof Vector) {
			return VECTOR;
		}
		else if (value instanceof List) {
			return LIST;
		}
		else if (value instanceof Set) {
			return SET;
		}
		else {
			return COLLECTION;
		}
	}

	private String getArrayType(Object array) {
		Class<?> componentType = array.getClass().getComponentType();
		return org.apache.commons.lang3.ClassUtils.getShortClassName(componentType);
	}
}
